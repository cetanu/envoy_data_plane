# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/cluster/redis/redis_cluster.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import timedelta
from typing import Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


@dataclass(eq=False, repr=False)
class RedisClusterConfig(betterproto.Message):
    """[#next-free-field: 7]"""

    # Interval between successive topology refresh requests. If not set, this
    # defaults to 5s.
    cluster_refresh_rate: timedelta = betterproto.message_field(1)
    # Timeout for topology refresh request. If not set, this defaults to 3s.
    cluster_refresh_timeout: timedelta = betterproto.message_field(2)
    # The minimum interval that must pass after triggering a topology refresh
    # request before a new request can possibly be triggered again. Any errors
    # received during one of these time intervals are ignored. If not set, this
    # defaults to 5s.
    redirect_refresh_interval: timedelta = betterproto.message_field(3)
    # The number of redirection errors that must be received before triggering a
    # topology refresh request. If not set, this defaults to 5. If this is set to
    # 0, topology refresh after redirect is disabled.
    redirect_refresh_threshold: Optional[int] = betterproto.message_field(
        4, wraps=betterproto.TYPE_UINT32
    )
    # The number of failures that must be received before triggering a topology
    # refresh request. If not set, this defaults to 0, which disables the
    # topology refresh due to failure.
    failure_refresh_threshold: int = betterproto.uint32_field(5)
    # The number of hosts became degraded or unhealthy before triggering a
    # topology refresh request. If not set, this defaults to 0, which disables
    # the topology refresh due to degraded or unhealthy host.
    host_degraded_refresh_threshold: int = betterproto.uint32_field(6)

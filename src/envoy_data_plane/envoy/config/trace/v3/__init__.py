# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/trace/v3/trace.proto, envoy/config/trace/v3/xray.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


class ZipkinConfigCollectorEndpointVersion(betterproto.Enum):
    DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE = 0
    HTTP_JSON = 1
    HTTP_PROTO = 2
    GRPC = 3


class OpenCensusConfigTraceContext(betterproto.Enum):
    NONE = 0
    TRACE_CONTEXT = 1
    GRPC_TRACE_BIN = 2
    CLOUD_TRACE_CONTEXT = 3
    B3 = 4


@dataclass(eq=False, repr=False)
class Tracing(betterproto.Message):
    """
    The tracing configuration specifies global settings for the HTTP tracer
    used by Envoy. The configuration is defined by the :ref:`Bootstrap
    <envoy_api_msg_config.bootstrap.v3.Bootstrap>` :ref:`tracing
    <envoy_api_field_config.bootstrap.v3.Bootstrap.tracing>` field. Envoy may
    support other tracers in the future, but right now the HTTP tracer is the
    only one supported.
    """

    # Provides configuration for the HTTP tracer.
    http: "TracingHttp" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TracingHttp(betterproto.Message):
    # The name of the HTTP trace driver to instantiate. The name must match a
    # supported HTTP trace driver. Built-in trace drivers: - *envoy.lightstep* -
    # *envoy.zipkin* - *envoy.dynamic.ot* - *envoy.tracers.datadog* -
    # *envoy.tracers.opencensus* - *envoy.tracers.xray*
    name: str = betterproto.string_field(1)
    typed_config: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(
        3, group="config_type"
    )


@dataclass(eq=False, repr=False)
class LightstepConfig(betterproto.Message):
    """
    Configuration for the LightStep tracer. [#extension:
    envoy.tracers.lightstep]
    """

    # The cluster manager cluster that hosts the LightStep collectors.
    collector_cluster: str = betterproto.string_field(1)
    # File containing the access token to the `LightStep
    # <https://lightstep.com/>`_ API.
    access_token_file: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ZipkinConfig(betterproto.Message):
    """
    Configuration for the Zipkin tracer. [#extension: envoy.tracers.zipkin]
    [#next-free-field: 6]
    """

    # The cluster manager cluster that hosts the Zipkin collectors. Note that the
    # Zipkin cluster must be defined in the :ref:`Bootstrap static cluster
    # resources
    # <envoy_api_field_config.bootstrap.v3.Bootstrap.StaticResources.clusters>`.
    collector_cluster: str = betterproto.string_field(1)
    # The API endpoint of the Zipkin service where the spans will be sent. When
    # using a standard Zipkin installation, the API endpoint is typically
    # /api/v1/spans, which is the default value.
    collector_endpoint: str = betterproto.string_field(2)
    # Determines whether a 128bit trace id will be used when creating a new trace
    # instance. The default value is false, which will result in a 64 bit trace
    # id being used.
    trace_id_128_bit: bool = betterproto.bool_field(3)
    # Determines whether client and server spans will share the same span
    # context. The default value is true.
    shared_span_context: Optional[bool] = betterproto.message_field(
        4, wraps=betterproto.TYPE_BOOL
    )
    # Determines the selected collector endpoint version. By default, the
    # ``HTTP_JSON_V1`` will be used.
    collector_endpoint_version: "ZipkinConfigCollectorEndpointVersion" = (
        betterproto.enum_field(5)
    )


@dataclass(eq=False, repr=False)
class DynamicOtConfig(betterproto.Message):
    """
    DynamicOtConfig is used to dynamically load a tracer from a shared library
    that implements the `OpenTracing dynamic loading API
    <https://github.com/opentracing/opentracing-cpp>`_. [#extension:
    envoy.tracers.dynamic_ot]
    """

    # Dynamic library implementing the `OpenTracing API
    # <https://github.com/opentracing/opentracing-cpp>`_.
    library: str = betterproto.string_field(1)
    # The configuration to use when creating a tracer from the given dynamic
    # library.
    config: "betterproto_lib_google_protobuf.Struct" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DatadogConfig(betterproto.Message):
    """
    Configuration for the Datadog tracer. [#extension: envoy.tracers.datadog]
    """

    # The cluster to use for submitting traces to the Datadog agent.
    collector_cluster: str = betterproto.string_field(1)
    # The name used for the service when traces are generated by envoy.
    service_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class OpenCensusConfig(betterproto.Message):
    """
    Configuration for the OpenCensus tracer. [#next-free-field: 13]
    [#extension: envoy.tracers.opencensus]
    """

    # Configures tracing, e.g. the sampler, max number of annotations, etc.
    trace_config: "____opencensus_proto_trace_v1__.TraceConfig" = (
        betterproto.message_field(1)
    )
    # Enables the stdout exporter if set to true. This is intended for debugging
    # purposes.
    stdout_exporter_enabled: bool = betterproto.bool_field(2)
    # Enables the Stackdriver exporter if set to true. The project_id must also
    # be set.
    stackdriver_exporter_enabled: bool = betterproto.bool_field(3)
    # The Cloud project_id to use for Stackdriver tracing.
    stackdriver_project_id: str = betterproto.string_field(4)
    # (optional) By default, the Stackdriver exporter will connect to production
    # Stackdriver. If stackdriver_address is non-empty, it will instead connect
    # to this address, which is in the gRPC format:
    # https://github.com/grpc/grpc/blob/master/doc/naming.md
    stackdriver_address: str = betterproto.string_field(10)
    # Enables the Zipkin exporter if set to true. The url and service name must
    # also be set.
    zipkin_exporter_enabled: bool = betterproto.bool_field(5)
    # The URL to Zipkin, e.g. "http://127.0.0.1:9411/api/v2/spans"
    zipkin_url: str = betterproto.string_field(6)
    # Enables the OpenCensus Agent exporter if set to true. The address must also
    # be set.
    ocagent_exporter_enabled: bool = betterproto.bool_field(11)
    # The address of the OpenCensus Agent, if its exporter is enabled, in gRPC
    # format: https://github.com/grpc/grpc/blob/master/doc/naming.md
    ocagent_address: str = betterproto.string_field(12)
    # List of incoming trace context headers we will accept. First one found
    # wins.
    incoming_trace_context: List[
        "OpenCensusConfigTraceContext"
    ] = betterproto.enum_field(8)
    # List of outgoing trace context headers we will produce.
    outgoing_trace_context: List[
        "OpenCensusConfigTraceContext"
    ] = betterproto.enum_field(9)


@dataclass(eq=False, repr=False)
class TraceServiceConfig(betterproto.Message):
    """Configuration structure."""

    # The upstream gRPC cluster that hosts the metrics service.
    grpc_service: "__core_v3__.GrpcService" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class XRayConfig(betterproto.Message):
    # The UDP endpoint of the X-Ray Daemon where the spans will be sent. If this
    # value is not set, the default value of 127.0.0.1:2000 will be used.
    daemon_endpoint: "__core_v3__.SocketAddress" = betterproto.message_field(1)
    # The name of the X-Ray segment. By default this will be set to the cluster
    # name.
    segment_name: str = betterproto.string_field(2)
    # The location of a local custom sampling rules JSON file. For an example of
    # the sampling rules see: `X-Ray SDK documentation
    # <https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-go-
    # configuration.html#xray-sdk-go-configuration-sampling>`_
    sampling_rule_manifest: "__core_v3__.DataSource" = betterproto.message_field(3)


from .....opencensus.proto.trace import v1 as ____opencensus_proto_trace_v1__
from ...core import v3 as __core_v3__
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf

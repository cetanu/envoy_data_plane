# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/http/gzip/v2/gzip.proto
# plugin: python-betterproto
import warnings
from dataclasses import dataclass
from typing import List, Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


class GzipCompressionStrategy(betterproto.Enum):
    DEFAULT = 0
    FILTERED = 1
    HUFFMAN = 2
    RLE = 3


class GzipCompressionLevelEnum(betterproto.Enum):
    DEFAULT = 0
    BEST = 1
    SPEED = 2


@dataclass(eq=False, repr=False)
class Gzip(betterproto.Message):
    """[#next-free-field: 11]"""

    # Value from 1 to 9 that controls the amount of internal memory used by zlib.
    # Higher values use more memory, but are faster and produce better
    # compression results. The default value is 5.
    memory_level: Optional[int] = betterproto.message_field(
        1, wraps=betterproto.TYPE_UINT32
    )
    # Minimum response length, in bytes, which will trigger compression. The
    # default value is 30. .. attention:    **This field is deprecated**. Set the
    # `compressor` field instead.
    content_length: Optional[int] = betterproto.message_field(
        2, wraps=betterproto.TYPE_UINT32
    )
    # A value used for selecting the zlib compression level. This setting will
    # affect speed and amount of compression applied to the content. "BEST"
    # provides higher compression at the cost of higher latency, "SPEED" provides
    # lower compression with minimum impact on response time. "DEFAULT" provides
    # an optimal result between speed and compression. This field will be set to
    # "DEFAULT" if not specified.
    compression_level: "GzipCompressionLevelEnum" = betterproto.enum_field(3)
    # A value used for selecting the zlib compression strategy which is directly
    # related to the characteristics of the content. Most of the time "DEFAULT"
    # will be the best choice, though there are situations which changing this
    # parameter might produce better results. For example, run-length encoding
    # (RLE) is typically used when the content is known for having sequences
    # which same data occurs many consecutive times. For more information about
    # each strategy, please refer to zlib manual.
    compression_strategy: "GzipCompressionStrategy" = betterproto.enum_field(4)
    # Set of strings that allows specifying which mime-types yield compression;
    # e.g., application/json, text/html, etc. When this field is not defined,
    # compression will be applied to the following mime-types:
    # "application/javascript", "application/json", "application/xhtml+xml",
    # "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml". ..
    # attention:    **This field is deprecated**. Set the `compressor` field
    # instead.
    content_type: List[str] = betterproto.string_field(6)
    # If true, disables compression when the response contains an etag header.
    # When it is false, the filter will preserve weak etags and remove the ones
    # that require strong validation. .. attention:    **This field is
    # deprecated**. Set the `compressor` field instead.
    disable_on_etag_header: bool = betterproto.bool_field(7)
    # If true, removes accept-encoding from the request headers before
    # dispatching it to the upstream so that responses do not get compressed
    # before reaching the filter. .. attention:    **This field is deprecated**.
    # Set the `compressor` field instead.
    remove_accept_encoding_header: bool = betterproto.bool_field(8)
    # Value from 9 to 15 that represents the base two logarithmic of the
    # compressor's window size. Larger window results in better compression at
    # the expense of memory usage. The default is 12 which will produce a 4096
    # bytes window. For more details about this parameter, please refer to zlib
    # manual > deflateInit2.
    window_bits: Optional[int] = betterproto.message_field(
        9, wraps=betterproto.TYPE_UINT32
    )
    # Set of configuration parameters common for all compression filters. If this
    # field is set then the fields `content_length`, `content_type`,
    # `disable_on_etag_header` and `remove_accept_encoding_header` are ignored.
    compressor: "__compressor_v2__.Compressor" = betterproto.message_field(10)

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.content_length:
            warnings.warn("Gzip.content_length is deprecated", DeprecationWarning)
        if self.content_type:
            warnings.warn("Gzip.content_type is deprecated", DeprecationWarning)
        if self.disable_on_etag_header:
            warnings.warn(
                "Gzip.disable_on_etag_header is deprecated", DeprecationWarning
            )
        if self.remove_accept_encoding_header:
            warnings.warn(
                "Gzip.remove_accept_encoding_header is deprecated", DeprecationWarning
            )


@dataclass(eq=False, repr=False)
class GzipCompressionLevel(betterproto.Message):
    pass


from ...compressor import v2 as __compressor_v2__

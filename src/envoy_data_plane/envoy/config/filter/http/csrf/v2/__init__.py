# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/http/csrf/v2/csrf.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


@dataclass(eq=False, repr=False)
class CsrfPolicy(betterproto.Message):
    """CSRF filter config."""

    # Specifies the % of requests for which the CSRF filter is enabled. If
    # :ref:`runtime_key
    # <envoy_api_field_core.RuntimeFractionalPercent.runtime_key>` is specified,
    # Envoy will lookup the runtime key to get the percentage of requests to
    # filter. .. note::   This field defaults to 100/:ref:`HUNDRED
    # <envoy_api_enum_type.FractionalPercent.DenominatorType>`.
    filter_enabled: "_____api_v2_core__.RuntimeFractionalPercent" = (
        betterproto.message_field(1)
    )
    # Specifies that CSRF policies will be evaluated and tracked, but not
    # enforced. This is intended to be used when ``filter_enabled`` is off and
    # will be ignored otherwise. If :ref:`runtime_key
    # <envoy_api_field_core.RuntimeFractionalPercent.runtime_key>` is specified,
    # Envoy will lookup the runtime key to get the percentage of requests for
    # which it will evaluate and track the request's *Origin* and *Destination*
    # to determine if it's valid, but will not enforce any policies.
    shadow_enabled: "_____api_v2_core__.RuntimeFractionalPercent" = (
        betterproto.message_field(2)
    )
    # Specifies additional source origins that will be allowed in addition to the
    # destination origin. More information on how this can be configured via
    # runtime can be found :ref:`here <csrf-configuration>`.
    additional_origins: List[
        "_____type_matcher__.StringMatcher"
    ] = betterproto.message_field(3)


from ......api.v2 import core as _____api_v2_core__
from ......type import matcher as _____type_matcher__

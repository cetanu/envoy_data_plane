# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/access_loggers/file/v3/file.proto
# plugin: python-betterproto
import warnings
from dataclasses import dataclass

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


@dataclass(eq=False, repr=False)
class FileAccessLog(betterproto.Message):
    """
    Custom configuration for an :ref:`AccessLog
    <envoy_v3_api_msg_config.accesslog.v3.AccessLog>` that writes log entries
    directly to a file. Configures the built-in *envoy.access_loggers.file*
    AccessLog. [#next-free-field: 6]
    """

    # A path to a local file to which to write the access log entries.
    path: str = betterproto.string_field(1)
    # Access log :ref:`format string<config_access_log_format_strings>`. Envoy
    # supports :ref:`custom access log formats <config_access_log_format>` as
    # well as a :ref:`default format <config_access_log_default_format>`. This
    # field is deprecated. Please use :ref:`log_format <envoy_v3_api_field_extens
    # ions.access_loggers.file.v3.FileAccessLog.log_format>`.
    format: str = betterproto.string_field(2, group="access_log_format")
    # Access log :ref:`format dictionary<config_access_log_format_dictionaries>`.
    # All values are rendered as strings. This field is deprecated. Please use
    # :ref:`log_format <envoy_v3_api_field_extensions.access_loggers.file.v3.File
    # AccessLog.log_format>`.
    json_format: "betterproto_lib_google_protobuf.Struct" = betterproto.message_field(
        3, group="access_log_format"
    )
    # Access log :ref:`format dictionary<config_access_log_format_dictionaries>`.
    # Values are rendered as strings, numbers, or boolean values as appropriate.
    # Nested JSON objects may be produced by some command operators
    # (e.g.FILTER_STATE or DYNAMIC_METADATA). See the documentation for a
    # specific command operator for details. This field is deprecated. Please use
    # :ref:`log_format <envoy_v3_api_field_extensions.access_loggers.file.v3.File
    # AccessLog.log_format>`.
    typed_json_format: "betterproto_lib_google_protobuf.Struct" = (
        betterproto.message_field(4, group="access_log_format")
    )
    # Configuration to form access log data and format. If not specified, use
    # :ref:`default format <config_access_log_default_format>`.
    log_format: "____config_core_v3__.SubstitutionFormatString" = (
        betterproto.message_field(5, group="access_log_format")
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.format:
            warnings.warn("FileAccessLog.format is deprecated", DeprecationWarning)
        if self.json_format:
            warnings.warn("FileAccessLog.json_format is deprecated", DeprecationWarning)
        if self.typed_json_format:
            warnings.warn(
                "FileAccessLog.typed_json_format is deprecated", DeprecationWarning
            )


from .....config.core import v3 as ____config_core_v3__
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf

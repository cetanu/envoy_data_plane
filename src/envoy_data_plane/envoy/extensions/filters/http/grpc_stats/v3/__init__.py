# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/grpc_stats/v3/config.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Optional

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


@dataclass(eq=False, repr=False)
class FilterConfig(betterproto.Message):
    """gRPC statistics filter configuration"""

    # If true, the filter maintains a filter state object with the request and
    # response message counts.
    emit_filter_state: bool = betterproto.bool_field(1)
    # If set, specifies an allowlist of service/methods that will have individual
    # stats emitted for them. Any call that does not match the allowlist will be
    # counted in a stat with no method specifier: `cluster.<name>.grpc.*`.
    individual_method_stats_allowlist: "_____config_core_v3__.GrpcMethodList" = (
        betterproto.message_field(2, group="per_method_stat_specifier")
    )
    # If set to true, emit stats for all service/method names. If set to false,
    # emit stats for all service/message types to the same stats without
    # including the service/method in the name, with prefix
    # `cluster.<name>.grpc`. This can be useful if service/method granularity is
    # not needed, or if each cluster only receives a single method. ..
    # attention::   This option is only safe if all clients are trusted. If this
    # option is enabled   with untrusted clients, the clients could cause
    # unbounded growth in the number of stats in   Envoy, using unbounded memory
    # and potentially slowing down stats pipelines. .. attention::   If neither
    # `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
    # behavior will default to `stats_for_all_methods=false`. This default value
    # is changed due   to the previous value being deprecated. This behavior can
    # be changed with runtime override   `envoy.deprecated_features.grpc_stats_fi
    # lter_enable_stats_for_all_methods_by_default`.
    stats_for_all_methods: Optional[bool] = betterproto.message_field(
        3, wraps=betterproto.TYPE_BOOL, group="per_method_stat_specifier"
    )
    # If true, the filter will gather a histogram for the request time of the
    # upstream. It works with :ref:`stats_for_all_methods <envoy_v3_api_field_ext
    # ensions.filters.http.grpc_stats.v3.FilterConfig.stats_for_all_methods>` and
    # :ref:`individual_method_stats_allowlist <envoy_v3_api_field_extensions.filt
    # ers.http.grpc_stats.v3.FilterConfig.individual_method_stats_allowlist>` the
    # same way request_message_count and response_message_count works.
    enable_upstream_stats: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class FilterObject(betterproto.Message):
    """gRPC statistics filter state object in protobuf form."""

    # Count of request messages in the request stream.
    request_message_count: int = betterproto.uint64_field(1)
    # Count of response messages in the response stream.
    response_message_count: int = betterproto.uint64_field(2)


from ......config.core import v3 as _____config_core_v3__

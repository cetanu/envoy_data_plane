# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/ratelimit/v3/rate_limit.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import timedelta

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


class RateLimitXRateLimitHeadersRfcVersion(betterproto.Enum):
    OFF = 0
    DRAFT_VERSION_03 = 1


class RateLimitPerRouteVhRateLimitsOptions(betterproto.Enum):
    OVERRIDE = 0
    INCLUDE = 1
    IGNORE = 2


@dataclass(eq=False, repr=False)
class RateLimit(betterproto.Message):
    """[#next-free-field: 9]"""

    # The rate limit domain to use when calling the rate limit service.
    domain: str = betterproto.string_field(1)
    # Specifies the rate limit configurations to be applied with the same stage
    # number. If not set, the default stage number is 0. .. note::  The filter
    # supports a range of 0 - 10 inclusively for stage numbers.
    stage: int = betterproto.uint32_field(2)
    # The type of requests the filter should apply to. The supported types are
    # *internal*, *external* or *both*. A request is considered internal if
    # :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>` is
    # set to true. If :ref:`x-envoy-internal<config_http_conn_man_headers_x-
    # envoy-internal>` is not set or false, a request is considered external. The
    # filter defaults to *both*, and it will apply to all request types.
    request_type: str = betterproto.string_field(3)
    # The timeout in milliseconds for the rate limit service RPC. If not set,
    # this defaults to 20ms.
    timeout: timedelta = betterproto.message_field(4)
    # The filter's behaviour in case the rate limiting service does not respond
    # back. When it is set to true, Envoy will not allow traffic in case of
    # communication failure between rate limiting service and the proxy. Defaults
    # to false.
    failure_mode_deny: bool = betterproto.bool_field(5)
    # Specifies whether a `RESOURCE_EXHAUSTED` gRPC code must be returned instead
    # of the default `UNAVAILABLE` gRPC code for a rate limited gRPC call. The
    # HTTP code will be 200 for a gRPC response.
    rate_limited_as_resource_exhausted: bool = betterproto.bool_field(6)
    # Configuration for an external rate limit service provider. If not
    # specified, any calls to the rate limit service will immediately return
    # success.
    rate_limit_service: "_____config_ratelimit_v3__.RateLimitServiceConfig" = (
        betterproto.message_field(7)
    )
    # Defines the standard version to use for X-RateLimit headers emitted by the
    # filter: * ``X-RateLimit-Limit`` - indicates the request-quota associated to
    # the   client in the current time-window followed by the description of the
    # quota policy. The values are returned by the rate limiting service in   :re
    # f:`current_limit<envoy_v3_api_field_service.ratelimit.v3.RateLimitResponse.
    # DescriptorStatus.current_limit>`   field. Example: `10, 10;w=1;name="per-
    # ip", 1000;w=3600`. * ``X-RateLimit-Remaining`` - indicates the remaining
    # requests in the   current time-window. The values are returned by the rate
    # limiting service   in :ref:`limit_remaining<envoy_v3_api_field_service.rate
    # limit.v3.RateLimitResponse.DescriptorStatus.limit_remaining>`   field. *
    # ``X-RateLimit-Reset`` - indicates the number of seconds until reset of
    # the current time-window. The values are returned by the rate limiting
    # service   in :ref:`duration_until_reset<envoy_v3_api_field_service.ratelimi
    # t.v3.RateLimitResponse.DescriptorStatus.duration_until_reset>`   field. In
    # case rate limiting policy specifies more then one time window, the values
    # above represent the window that is closest to reaching its limit. For more
    # information about the headers specification see selected version of the
    # `draft RFC <https://tools.ietf.org/id/draft-polli-ratelimit-
    # headers-03.html>`_. Disabled by default.
    enable_x_ratelimit_headers: "RateLimitXRateLimitHeadersRfcVersion" = (
        betterproto.enum_field(8)
    )


@dataclass(eq=False, repr=False)
class RateLimitPerRoute(betterproto.Message):
    # Specifies if the rate limit filter should include the virtual host rate
    # limits.
    vh_rate_limits: "RateLimitPerRouteVhRateLimitsOptions" = betterproto.enum_field(1)


from ......config.ratelimit import v3 as _____config_ratelimit_v3__

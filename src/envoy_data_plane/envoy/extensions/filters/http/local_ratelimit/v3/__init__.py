# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/local_ratelimit/v3/local_rate_limit.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


@dataclass(eq=False, repr=False)
class LocalRateLimit(betterproto.Message):
    """[#next-free-field: 12]"""

    # The human readable prefix to use when emitting stats.
    stat_prefix: str = betterproto.string_field(1)
    # This field allows for a custom HTTP response status code to the downstream
    # client when the request has been rate limited. Defaults to 429
    # (TooManyRequests). .. note::   If this is set to < 400, 429 will be used
    # instead.
    status: "_____type_v3__.HttpStatus" = betterproto.message_field(2)
    # The token bucket configuration to use for rate limiting requests that are
    # processed by this filter. Each request processed by the filter consumes a
    # single token. If the token is available, the request will be allowed. If no
    # tokens are available, the request will receive the configured rate limit
    # status. .. note::   It's fine for the token bucket to be unset for the
    # global configuration since the rate limit   can be applied at a the virtual
    # host or route level. Thus, the token bucket must be set   for the per route
    # configuration otherwise the config will be rejected. .. note::   When using
    # per route configuration, the bucket becomes unique to that route. .. note::
    # In the current implementation the token bucket's :ref:`fill_interval
    # <envoy_v3_api_field_type.v3.TokenBucket.fill_interval>` must be >= 50ms to
    # avoid too aggressive   refills.
    token_bucket: "_____type_v3__.TokenBucket" = betterproto.message_field(3)
    # If set, this will enable -- but not necessarily enforce -- the rate limit
    # for the given fraction of requests. Defaults to 0% of requests for safety.
    filter_enabled: "_____config_core_v3__.RuntimeFractionalPercent" = (
        betterproto.message_field(4)
    )
    # If set, this will enforce the rate limit decisions for the given fraction
    # of requests. Note: this only applies to the fraction of enabled requests.
    # Defaults to 0% of requests for safety.
    filter_enforced: "_____config_core_v3__.RuntimeFractionalPercent" = (
        betterproto.message_field(5)
    )
    # Specifies a list of HTTP headers that should be added to each request that
    # has been rate limited and is also forwarded upstream. This can only occur
    # when the filter is enabled but not enforced.
    request_headers_to_add_when_not_enforced: List[
        "_____config_core_v3__.HeaderValueOption"
    ] = betterproto.message_field(10)
    # Specifies a list of HTTP headers that should be added to each response for
    # requests that have been rate limited. This occurs when the filter is either
    # enabled or fully enforced.
    response_headers_to_add: List[
        "_____config_core_v3__.HeaderValueOption"
    ] = betterproto.message_field(6)
    # The rate limit descriptor list to use in the local rate limit to override
    # on. The rate limit descriptor is selected by the first full match from the
    # request descriptors. Example on how to use ::ref:`this
    # <config_http_filters_local_rate_limit_descriptors>` .. note::   In the
    # current implementation the descriptor's token bucket :ref:`fill_interval
    # <envoy_v3_api_field_type.v3.TokenBucket.fill_interval>` must be a multiple
    # global :ref:`token bucket's<envoy_v3_api_field_extensions.filters.http.loca
    # l_ratelimit.v3.LocalRateLimit.token_bucket>` fill interval.   The
    # descriptors must match verbatim for rate limiting to apply. There is no
    # partial   match by a subset of descriptor entries in the current
    # implementation.
    descriptors: List[
        "____common_ratelimit_v3__.LocalRateLimitDescriptor"
    ] = betterproto.message_field(8)
    # Specifies the rate limit configurations to be applied with the same stage
    # number. If not set, the default stage number is 0. .. note::  The filter
    # supports a range of 0 - 10 inclusively for stage numbers.
    stage: int = betterproto.uint32_field(9)
    # Specifies the scope of the rate limiter's token bucket. If set to false,
    # the token bucket is shared across all worker threads, thus the rate limits
    # are applied per Envoy process. If set to true, a token bucket is allocated
    # for each connection. Thus the rate limits are applied per connection
    # thereby allowing one to rate limit requests on a per connection basis. If
    # unspecified, the default value is false.
    local_rate_limit_per_downstream_connection: bool = betterproto.bool_field(11)


from ......config.core import v3 as _____config_core_v3__
from ......type import v3 as _____type_v3__
from .....common.ratelimit import v3 as ____common_ratelimit_v3__

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/oauth2/v4alpha/oauth.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


@dataclass(eq=False, repr=False)
class OAuth2Credentials(betterproto.Message):
    # The client_id to be used in the authorize calls. This value will be URL
    # encoded when sent to the OAuth server.
    client_id: str = betterproto.string_field(1)
    # The secret used to retrieve the access token. This value will be URL
    # encoded when sent to the OAuth server.
    token_secret: "____transport_sockets_tls_v4_alpha__.SdsSecretConfig" = (
        betterproto.message_field(2)
    )
    # If present, the secret token will be a HMAC using the provided secret.
    hmac_secret: "____transport_sockets_tls_v4_alpha__.SdsSecretConfig" = (
        betterproto.message_field(3, group="token_formation")
    )


@dataclass(eq=False, repr=False)
class OAuth2Config(betterproto.Message):
    """OAuth config [#next-free-field: 9]"""

    # Endpoint on the authorization server to retrieve the access token from.
    token_endpoint: "_____config_core_v4_alpha__.HttpUri" = betterproto.message_field(1)
    # The endpoint redirect to for authorization in response to unauthorized
    # requests.
    authorization_endpoint: str = betterproto.string_field(2)
    # Credentials used for OAuth.
    credentials: "OAuth2Credentials" = betterproto.message_field(3)
    # The redirect URI passed to the authorization endpoint. Supports header
    # formatting tokens. For more information, including details on header value
    # syntax, see the documentation on :ref:`custom request headers
    # <config_http_conn_man_headers_custom_request_headers>`. This URI should not
    # contain any query parameters.
    redirect_uri: str = betterproto.string_field(4)
    # Matching criteria used to determine whether a path appears to be the result
    # of a redirect from the authorization server.
    redirect_path_matcher: "_____type_matcher_v4_alpha__.PathMatcher" = (
        betterproto.message_field(5)
    )
    # The path to sign a user out, clearing their credential cookies.
    signout_path: "_____type_matcher_v4_alpha__.PathMatcher" = (
        betterproto.message_field(6)
    )
    # Forward the OAuth token as a Bearer to upstream web service.
    forward_bearer_token: bool = betterproto.bool_field(7)
    # Any request that matches any of the provided matchers will be passed
    # through without OAuth validation.
    pass_through_matcher: List[
        "_____config_route_v4_alpha__.HeaderMatcher"
    ] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class OAuth2(betterproto.Message):
    """Filter config."""

    # Leave this empty to disable OAuth2 for a specific route, using per filter
    # config.
    config: "OAuth2Config" = betterproto.message_field(1)


from ......config.core import v4alpha as _____config_core_v4_alpha__
from ......config.route import v4alpha as _____config_route_v4_alpha__
from ......type.matcher import v4alpha as _____type_matcher_v4_alpha__
from .....transport_sockets.tls import v4alpha as ____transport_sockets_tls_v4_alpha__

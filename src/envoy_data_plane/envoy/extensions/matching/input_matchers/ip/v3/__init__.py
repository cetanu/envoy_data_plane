# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/matching/input_matchers/ip/v3/ip.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase


@dataclass(eq=False, repr=False)
class Ip(betterproto.Message):
    """
    This input matcher matches IPv4 or IPv6 addresses against a list of CIDR
    ranges. It returns true if and only if the input IP belongs to at least one
    of these CIDR ranges. Internally, it uses a Level-Compressed trie, as
    described in the paper `IP-address lookup using LC-tries
    <https://www.nada.kth.se/~snilsson/publications/IP-address-lookup-using-LC-
    tries/>`_ by S. Nilsson and G. Karlsson. For "big" lists of IPs, this
    matcher is more efficient than multiple single IP matcher, that would have
    a linear cost.
    """

    # Match if the IP belongs to any of these CIDR ranges.
    cidr_ranges: List["_____config_core_v3__.CidrRange"] = betterproto.message_field(1)
    # The human readable prefix to use when emitting statistics for the IP input
    # matcher. Names in the table below are concatenated to this prefix. .. csv-
    # table::    :header: Name, Type, Description    :widths: 1, 1, 2
    # ip_parsing_failed, Counter, Total number of IP addresses the matcher was
    # unable to parse
    stat_prefix: str = betterproto.string_field(2)


from ......config.core import v3 as _____config_core_v3__

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/tap/v3/tap.proto, envoy/service/tap/v3/tapds.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterable, AsyncIterator, Dict, Iterable, List, Optional, Union

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class StreamTapsRequest(betterproto.Message):
    """
    [#not-implemented-hide:] Stream message for the Tap API. Envoy will open a
    stream to the server and stream taps without ever expecting a response.
    """

    # Identifier data effectively is a structured metadata. As a performance
    # optimization this will only be sent in the first message on the stream.
    identifier: "StreamTapsRequestIdentifier" = betterproto.message_field(1)
    # The trace id. this can be used to merge together a streaming trace. Note
    # that the trace_id is not guaranteed to be spatially or temporally unique.
    trace_id: int = betterproto.uint64_field(2)
    # The trace data.
    trace: "___data_tap_v3__.TraceWrapper" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class StreamTapsRequestIdentifier(betterproto.Message):
    # The node sending taps over the stream.
    node: "___config_core_v3__.Node" = betterproto.message_field(1)
    # The opaque identifier that was set in the :ref:`output config
    # <envoy_api_field_config.tap.v3.StreamingGrpcSink.tap_id>`.
    tap_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class StreamTapsResponse(betterproto.Message):
    """[#not-implemented-hide:]"""

    pass


@dataclass(eq=False, repr=False)
class TapResource(betterproto.Message):
    """
    [#not-implemented-hide:] A tap resource is essentially a tap configuration
    with a name The filter TapDS config references this name.
    """

    # The name of the tap configuration.
    name: str = betterproto.string_field(1)
    # Tap config to apply
    config: "___config_tap_v3__.TapConfig" = betterproto.message_field(2)


class TapSinkServiceStub(betterproto.ServiceStub):
    async def stream_taps(
        self,
        request_iterator: Union[
            AsyncIterable["StreamTapsRequest"], Iterable["StreamTapsRequest"]
        ],
    ) -> "StreamTapsResponse":

        return await self._stream_unary(
            "/envoy.service.tap.v3.TapSinkService/StreamTaps",
            request_iterator,
            StreamTapsRequest,
            StreamTapsResponse,
        )


class TapDiscoveryServiceStub(betterproto.ServiceStub):
    async def stream_tap_configs(
        self,
        request_iterator: Union[
            AsyncIterable["__discovery_v3__.DiscoveryRequest"],
            Iterable["__discovery_v3__.DiscoveryRequest"],
        ],
    ) -> AsyncIterator["__discovery_v3__.DiscoveryResponse"]:

        async for response in self._stream_stream(
            "/envoy.service.tap.v3.TapDiscoveryService/StreamTapConfigs",
            request_iterator,
            __discovery_v3__.DiscoveryRequest,
            __discovery_v3__.DiscoveryResponse,
        ):
            yield response

    async def delta_tap_configs(
        self,
        request_iterator: Union[
            AsyncIterable["__discovery_v3__.DeltaDiscoveryRequest"],
            Iterable["__discovery_v3__.DeltaDiscoveryRequest"],
        ],
    ) -> AsyncIterator["__discovery_v3__.DeltaDiscoveryResponse"]:

        async for response in self._stream_stream(
            "/envoy.service.tap.v3.TapDiscoveryService/DeltaTapConfigs",
            request_iterator,
            __discovery_v3__.DeltaDiscoveryRequest,
            __discovery_v3__.DeltaDiscoveryResponse,
        ):
            yield response

    async def fetch_tap_configs(
        self,
        *,
        version_info: str = "",
        node: "___config_core_v3__.Node" = None,
        resource_names: Optional[List[str]] = None,
        type_url: str = "",
        response_nonce: str = "",
        error_detail: "____google_rpc__.Status" = None,
    ) -> "__discovery_v3__.DiscoveryResponse":
        resource_names = resource_names or []

        request = __discovery_v3__.DiscoveryRequest()
        request.version_info = version_info
        if node is not None:
            request.node = node
        request.resource_names = resource_names
        request.type_url = type_url
        request.response_nonce = response_nonce
        if error_detail is not None:
            request.error_detail = error_detail

        return await self._unary_unary(
            "/envoy.service.tap.v3.TapDiscoveryService/FetchTapConfigs",
            request,
            __discovery_v3__.DiscoveryResponse,
        )


class TapSinkServiceBase(ServiceBase):
    async def stream_taps(
        self, request_iterator: AsyncIterator["StreamTapsRequest"]
    ) -> "StreamTapsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_stream_taps(self, stream: grpclib.server.Stream) -> None:
        request_kwargs = {"request_iterator": stream.__aiter__()}

        response = await self.stream_taps(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/envoy.service.tap.v3.TapSinkService/StreamTaps": grpclib.const.Handler(
                self.__rpc_stream_taps,
                grpclib.const.Cardinality.STREAM_UNARY,
                StreamTapsRequest,
                StreamTapsResponse,
            ),
        }


class TapDiscoveryServiceBase(ServiceBase):
    async def stream_tap_configs(
        self, request_iterator: AsyncIterator["__discovery_v3__.DiscoveryRequest"]
    ) -> AsyncIterator["__discovery_v3__.DiscoveryResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delta_tap_configs(
        self, request_iterator: AsyncIterator["__discovery_v3__.DeltaDiscoveryRequest"]
    ) -> AsyncIterator["__discovery_v3__.DeltaDiscoveryResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fetch_tap_configs(
        self,
        version_info: str,
        node: "___config_core_v3__.Node",
        resource_names: Optional[List[str]],
        type_url: str,
        response_nonce: str,
        error_detail: "____google_rpc__.Status",
    ) -> "__discovery_v3__.DiscoveryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_stream_tap_configs(self, stream: grpclib.server.Stream) -> None:
        request_kwargs = {"request_iterator": stream.__aiter__()}

        await self._call_rpc_handler_server_stream(
            self.stream_tap_configs,
            stream,
            request_kwargs,
        )

    async def __rpc_delta_tap_configs(self, stream: grpclib.server.Stream) -> None:
        request_kwargs = {"request_iterator": stream.__aiter__()}

        await self._call_rpc_handler_server_stream(
            self.delta_tap_configs,
            stream,
            request_kwargs,
        )

    async def __rpc_fetch_tap_configs(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "version_info": request.version_info,
            "node": request.node,
            "resource_names": request.resource_names,
            "type_url": request.type_url,
            "response_nonce": request.response_nonce,
            "error_detail": request.error_detail,
        }

        response = await self.fetch_tap_configs(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/envoy.service.tap.v3.TapDiscoveryService/StreamTapConfigs": grpclib.const.Handler(
                self.__rpc_stream_tap_configs,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery_v3__.DiscoveryRequest,
                __discovery_v3__.DiscoveryResponse,
            ),
            "/envoy.service.tap.v3.TapDiscoveryService/DeltaTapConfigs": grpclib.const.Handler(
                self.__rpc_delta_tap_configs,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery_v3__.DeltaDiscoveryRequest,
                __discovery_v3__.DeltaDiscoveryResponse,
            ),
            "/envoy.service.tap.v3.TapDiscoveryService/FetchTapConfigs": grpclib.const.Handler(
                self.__rpc_fetch_tap_configs,
                grpclib.const.Cardinality.UNARY_UNARY,
                __discovery_v3__.DiscoveryRequest,
                __discovery_v3__.DiscoveryResponse,
            ),
        }


from ....config.core import v3 as ___config_core_v3__
from ....config.tap import v3 as ___config_tap_v3__
from ....data.tap import v3 as ___data_tap_v3__
from ...discovery import v3 as __discovery_v3__

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/metrics/v2/metrics_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterable, AsyncIterator, Dict, Iterable, List, Union

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class StreamMetricsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StreamMetricsMessage(betterproto.Message):
    # Identifier data effectively is a structured metadata. As a performance
    # optimization this will only be sent in the first message on the stream.
    identifier: "StreamMetricsMessageIdentifier" = betterproto.message_field(1)
    # A list of metric entries
    envoy_metrics: List[
        "____io_prometheus_client__.MetricFamily"
    ] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class StreamMetricsMessageIdentifier(betterproto.Message):
    # The node sending metrics over the stream.
    node: "___api_v2_core__.Node" = betterproto.message_field(1)


class MetricsServiceStub(betterproto.ServiceStub):
    async def stream_metrics(
        self,
        request_iterator: Union[
            AsyncIterable["StreamMetricsMessage"], Iterable["StreamMetricsMessage"]
        ],
    ) -> "StreamMetricsResponse":

        return await self._stream_unary(
            "/envoy.service.metrics.v2.MetricsService/StreamMetrics",
            request_iterator,
            StreamMetricsMessage,
            StreamMetricsResponse,
        )


class MetricsServiceBase(ServiceBase):
    async def stream_metrics(
        self, request_iterator: AsyncIterator["StreamMetricsMessage"]
    ) -> "StreamMetricsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_stream_metrics(self, stream: grpclib.server.Stream) -> None:
        request_kwargs = {"request_iterator": stream.__aiter__()}

        response = await self.stream_metrics(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/envoy.service.metrics.v2.MetricsService/StreamMetrics": grpclib.const.Handler(
                self.__rpc_stream_metrics,
                grpclib.const.Cardinality.STREAM_UNARY,
                StreamMetricsMessage,
                StreamMetricsResponse,
            ),
        }


from .....io.prometheus import client as ____io_prometheus_client__
from ....api.v2 import core as ___api_v2_core__
